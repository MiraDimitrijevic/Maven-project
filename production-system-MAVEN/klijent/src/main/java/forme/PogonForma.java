/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forme;

import java.util.ArrayList;
import java.util.Date;

import javax.swing.JOptionPane;

import domen.Grad;
import domen.Korisnik;
import domen.Materijal;
import domen.Pogon;
import konstante.Operacije;
import logika.Komunikacija;
import modeli.ModelTabelePogon;
import transfer.KlijentskiZahtev;
import transfer.ServerskiOdgovor;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.awt.event.ActionEvent;
import javax.swing.JButton;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

/**
 *Klasa koja predstavlja GKI i sluzi za prikaz svih pogona koji su
 *uneti u sistem, kao i za unos novog pogona, ili izmenu postojeceg.
 *. Nasledjuje {@link javax.swing.JFrame }.
 * @author Mirjana Dimitrijevic
 */
public class PogonForma extends javax.swing.JFrame {
	/**
	 * Pogon koji je potrebno izmeniti.
	 */
Pogon pogonIzmena;
    /**
     * Creates new form PogonForma
     */
    public PogonForma() {
        initComponents();
           setLocationRelativeTo(null);
        setTitle("Pogoni");
        tblPogon.setModel(new ModelTabelePogon());
        popuniTabelu();
        popuniGradove();
        popuniKorisnike();
    }
    
 /**
  * Metoda koja vraca pogon koji je potreno izmeniti.
  * @return Pogon koji ce se izmeniti.
  */

    public Pogon getPogonIzmena() {
		return pogonIzmena;
	}


    /**
     * Metoda koja postavlja podatke o pogonu koji ce se izmeniti.
     * @param pogonIzmena Pogon koji ce se izmeniti.
     */
	public void setPogonIzmena(Pogon pogonIzmena) {
		this.pogonIzmena = pogonIzmena;
	}

/**
 * Metoda koja popunjava combobox sa podacima o svim korisnicima,
 * koji su uzeti iz baze podataka.
 */

	private void popuniKorisnike() {
cmbNadlezni.removeAllItems();
KlijentskiZahtev kz= new KlijentskiZahtev(Operacije.PRIKAZI_SVE_KORISNIKE, null);
Komunikacija.getInstance().posaljiZahtev(kz);
ServerskiOdgovor so= Komunikacija.getInstance().primiOdgovor();
ArrayList<Korisnik> korisnici=(ArrayList<Korisnik>) so.getOdgovor();
for (Korisnik korisnik : korisnici) {
	cmbNadlezni.addItem(korisnik);
}
	}
	/**
	 * Metoda koja popunjava combobox sa podacima o svim gradovima,
	 * koji su uzeti iz baze podataka.
	 */
	private void popuniGradove() {
		cmbGrad.removeAllItems();
		KlijentskiZahtev kz= new KlijentskiZahtev(Operacije.PRIKAZI_SVE_GRADOVE, null);
		Komunikacija.getInstance().posaljiZahtev(kz);
		ServerskiOdgovor so= Komunikacija.getInstance().primiOdgovor();
		ArrayList<Grad> gradovi= (ArrayList<Grad>) so.getOdgovor();
		for (Grad grad : gradovi) {
			cmbGrad.addItem(grad);
		}
	}
	/**
	 * Metoda koja popunjava tabelu sa podacima o svim pogonima,
	 * koji su uzeti iz baze podataka.
	 */
	private void popuniTabelu() {
    	ModelTabelePogon mtp= (ModelTabelePogon) tblPogon.getModel();
    	KlijentskiZahtev kz= new KlijentskiZahtev(Operacije.PRIKAZI_SVE_POGONE, null);
    	Komunikacija.getInstance().posaljiZahtev(kz);
    	ServerskiOdgovor so= Komunikacija.getInstance().primiOdgovor();
    	ArrayList<Pogon> pogoni= (ArrayList<Pogon>) so.getOdgovor();
    	mtp.setLista(pogoni);
	}

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtDatumPocetkaRada = new javax.swing.JFormattedTextField();
        cmbGrad = new javax.swing.JComboBox();
        cmbNadlezni = new javax.swing.JComboBox();
        txtAdresa = new javax.swing.JTextField();
        txtKontakt = new javax.swing.JTextField();
        rbDa = new javax.swing.JRadioButton();
        rbNe = new javax.swing.JRadioButton();
        btnSacuvaj = new javax.swing.JButton();
        btnSacuvaj.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		String adresa= txtAdresa.getText();
        		String kontakt= txtKontakt.getText();
        		if(adresa.isEmpty() || kontakt.isEmpty() || txtDatumPocetkaRada.getText().isEmpty())
        		{
        			JOptionPane.showMessageDialog(null, "Sva polja moraju biti popunjena!", "Cuvanje nije omoguceno", JOptionPane.WARNING_MESSAGE);
        		return;
        		}
        		Grad grad=(Grad) cmbGrad.getSelectedItem();
        		Korisnik nadlezni=(Korisnik) cmbNadlezni.getSelectedItem();
        		boolean aktivan= rbDa.isSelected();
        		SimpleDateFormat sdf= new SimpleDateFormat("dd.MM.yyyy");
        		try {
					Date datum= sdf.parse(txtDatumPocetkaRada.getText());
					Pogon pogon= new Pogon(-1, datum, grad, adresa, kontakt, aktivan, nadlezni);
					
			    	KlijentskiZahtev kz= new KlijentskiZahtev(Operacije.SACUVAJ_POGON, pogon);
			    	Komunikacija.getInstance().posaljiZahtev(kz);
			    	ServerskiOdgovor so= Komunikacija.getInstance().primiOdgovor();
			    	
			    	if((Boolean) so.getOdgovor()) {
	        			JOptionPane.showMessageDialog(null, "Pogon je uspesno sacuvan", "Cuvanje uspesno", JOptionPane.INFORMATION_MESSAGE);
                         popuniTabelu();
	        		} else         			JOptionPane.showMessageDialog(null, "Doslo je do greske, pokusajte ponovo", "Cuvanje nije omoguceno", JOptionPane.ERROR_MESSAGE);
					
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
        	}
        });
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPogon = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        btnIzmeniIzab = new javax.swing.JButton();
        btnIzmeniIzab.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		int row=tblPogon.getSelectedRow();
        		if(row!=-1) {
        			ModelTabelePogon mtp= (ModelTabelePogon) tblPogon.getModel();
        	Pogon pogon= mtp.getPogon(row);
        	txtAdresa.setText(pogon.getAdresa());
        	txtKontakt.setText(pogon.getKontakt());
        	SimpleDateFormat sdf= new SimpleDateFormat("dd.MM.yyyy");
        	String format= sdf.format(pogon.getDatumPocetkaRada());
        	txtDatumPocetkaRada.setText(format);
        	cmbGrad.setSelectedItem(pogon.getGrad());
        	cmbNadlezni.setSelectedItem(pogon.getKorisnik());
        	rbDa.setSelected(pogon.isAktivan());
        	rbNe.setSelected(!rbDa.isSelected());
        	btnIzmeni.setEnabled(true);
        	btnSacuvaj.setEnabled(false);
        	btnIzmeniIzab.setEnabled(false);
        	btnOsvezi.setEnabled(false);
        	setPogonIzmena(pogon);
        		}
        	}
        });
        btnOsvezi = new javax.swing.JButton();
        btnOsvezi.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		popuniTabelu();
        	}
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Datum pocetka rada pogona:");

        jLabel2.setText(" Grad:");

        jLabel3.setText(" Adresa:");

        jLabel4.setText("Kontakt:");

        jLabel5.setText(" Aktivan:");

        jLabel6.setText("Nadlezni:");

        txtDatumPocetkaRada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd.MM.yyyy"))));

        buttonGroup1.add(rbDa);
        rbDa.setText("da");

        buttonGroup1.add(rbNe);
        rbNe.setSelected(true);
        rbNe.setText("ne");

        btnSacuvaj.setText("Sacuvaj pogon");

        tblPogon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblPogon);

        jLabel7.setText("Lista pogona:");

        btnIzmeniIzab.setText("Izmeni izabrani pogon");

        btnOsvezi.setText("Osvezi listu pogona");
        
        btnIzmeni = new JButton("Izmeni pogon");
        btnIzmeni.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
String adresa=txtAdresa.getText();
String kontakt= txtKontakt.getText();
if(adresa.isEmpty() || kontakt.isEmpty() || txtDatumPocetkaRada.getText().isEmpty())
{
	JOptionPane.showMessageDialog(null, "Sva polja moraju biti popunjena!", "Cuvanje nije omoguceno", JOptionPane.WARNING_MESSAGE);
return;
}
Grad grad=(Grad) cmbGrad.getSelectedItem();
Korisnik nadlezni=(Korisnik) cmbNadlezni.getSelectedItem();
boolean aktivan= rbDa.isSelected();
SimpleDateFormat sdf= new SimpleDateFormat("dd.MM.yyyy");
try {
	Date datum= sdf.parse(txtDatumPocetkaRada.getText());
	Pogon pogon= new Pogon(pogonIzmena.getPogonID(), datum, grad, adresa, kontakt, aktivan, nadlezni);
	
	KlijentskiZahtev kz= new KlijentskiZahtev(Operacije.IZMENI_POGON, pogon);
	Komunikacija.getInstance().posaljiZahtev(kz);
	ServerskiOdgovor so= Komunikacija.getInstance().primiOdgovor();
	if((Boolean) so.getOdgovor()) {
		JOptionPane.showMessageDialog(null, "Pogon je uspesno izmenjen", "Izmena uspesna", JOptionPane.INFORMATION_MESSAGE);
         popuniTabelu();
         btnIzmeni.setEnabled(false);
         btnSacuvaj.setEnabled(true);
     	btnIzmeniIzab.setEnabled(true);
     	btnOsvezi.setEnabled(true);
         setPogonIzmena(null);
         txtAdresa.setText("");
         txtDatumPocetkaRada.setText("");
         txtKontakt.setText("");
	} else         			JOptionPane.showMessageDialog(null, "Doslo je do greske, pokusajte ponovo", "Izmena nije omogucena", JOptionPane.ERROR_MESSAGE);
	
	
} catch (ParseException e1) {
	e1.printStackTrace();
}

        	}
        });
        btnIzmeni.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(18)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(btnSacuvaj)
        							.addGap(18)
        							.addComponent(btnIzmeni)
        							.addGap(55)
        							.addComponent(jLabel7))
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(jLabel5)
        								.addComponent(jLabel6)
        								.addComponent(jLabel3)
        								.addComponent(jLabel4)
        								.addComponent(jLabel2)
        								.addComponent(jLabel1))
        							.addGap(23)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        									.addComponent(txtDatumPocetkaRada)
        									.addComponent(cmbGrad, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        									.addComponent(cmbNadlezni, 0, 221, Short.MAX_VALUE)
        									.addComponent(txtAdresa)
        									.addComponent(txtKontakt))
        								.addGroup(layout.createSequentialGroup()
        									.addGap(6)
        									.addComponent(rbDa)
        									.addGap(55)
        									.addComponent(rbNe))))
        						.addGroup(layout.createSequentialGroup()
        							.addGap(6)
        							.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 488, GroupLayout.PREFERRED_SIZE))))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(84)
        					.addComponent(btnIzmeniIzab)
        					.addGap(49)
        					.addComponent(btnOsvezi)))
        			.addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(12)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel1)
        				.addComponent(txtDatumPocetkaRada, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(9)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel2)
        				.addComponent(cmbGrad, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(31)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(jLabel3)
        					.addGap(6)
        					.addComponent(jLabel4))
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(txtAdresa, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(txtKontakt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(jLabel5)
        					.addComponent(rbDa))
        				.addComponent(rbNe))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(cmbNadlezni, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel6))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnSacuvaj)
        				.addComponent(jLabel7)
        				.addComponent(btnIzmeni))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 136, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnIzmeniIzab)
        				.addComponent(btnOsvezi))
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PogonForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PogonForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PogonForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PogonForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PogonForma().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbGrad;
    private javax.swing.JComboBox cmbNadlezni;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JButton btnIzmeniIzab;
    private javax.swing.JButton btnOsvezi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tblPogon;
    private javax.swing.JRadioButton rbDa;
    private javax.swing.JRadioButton rbNe;
    private javax.swing.JTextField txtAdresa;
    private javax.swing.JFormattedTextField txtDatumPocetkaRada;
    private javax.swing.JTextField txtKontakt;
    private JButton btnIzmeni;
    // End of variables declaration                   
}
